<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Comment</key>
	<string>Created with Recipe Robot v2.4.1 (https://github.com/homebysix/recipe-robot)</string>
	<key>Description</key>
	<string>Downloads the latest version of DisplayLinkManager and imports it into Munki.</string>
	<key>Identifier</key>
	<string>com.github.peetinc.munki.DisplayLinkManager</string>
	<key>Input</key>
	<dict>
		<key>APP_FILENAME</key>
		<string>DisplayLink Manager</string>
		<key>MUNKI_REPO_SUBDIR</key>
		<string>apps/%NAME%</string>
		<key>NAME</key>
		<string>DisplayLinkManager</string>
		<key>pkginfo</key>
		<dict>
			<key>catalogs</key>
			<array>
				<string>testing</string>
			</array>
			<key>category</key>
			<string>Drivers</string>
			<key>description</key>
			<string>DisplayLink Manager is a new way to enable your DisplayLink dock, adapter or monitor on macOS platforms. It's an application that combines our latest driver with features that streamline the setup of mutliple displays up to 4K.</string>
			<key>developer</key>
			<string>DisplayLink</string>
			<key>display_name</key>
			<string>DisplayLinkManager</string>
			<key>name</key>
			<string>%NAME%</string>
			<key>unattended_install</key>
			<true/>
			<key>uninstall_method</key>
			<string>uninstall_script</string>
			<key>uninstall_script</key>
			<string>#!/bin/bash

# DisplayLink Manager Uninstall Script

# Unload LaunchAgent if it's loaded
if launchctl list | grep -q "com.displaylink.loginscreen"; then
    echo "Unloading DisplayLink login screen agent..."
    launchctl unload "/Library/LaunchAgents/com.displaylink.loginscreen.plist" 2&gt;/dev/null
fi

# Remove LaunchAgent plist
if [ -f "/Library/LaunchAgents/com.displaylink.loginscreen.plist" ]; then
    echo "Removing DisplayLink login screen agent plist..."
    rm -f "/Library/LaunchAgents/com.displaylink.loginscreen.plist"
fi

# Quit DisplayLink processes if they're running
if pgrep -x "DisplayLinkUserAgent" &gt; /dev/null; then
    echo "Quitting DisplayLinkUserAgent..."
    killall "DisplayLinkUserAgent" 2&gt;/dev/null
fi

if pgrep -x "DisplayLinkXpcService" &gt; /dev/null; then
    echo "Quitting DisplayLinkXpcService..."
    killall "DisplayLinkXpcService" 2&gt;/dev/null
fi

# Give processes a moment to exit
sleep 1

# Remove DisplayLink Manager app
if [ -d "/Applications/DisplayLink Manager.app" ]; then
    echo "Removing DisplayLink Manager application..."
    rm -rf "/Applications/DisplayLink Manager.app"
fi

# Forget package receipts
echo "Forgetting DisplayLink package receipts..."
pkgutil --forget "com.displaylink.displaylinkloginscreenext" 2&gt;/dev/null
pkgutil --forget "com.displaylink.displaylinkmanagerapp" 2&gt;/dev/null

echo "DisplayLink Manager uninstall complete."

exit 0</string>			
		</dict>
	</dict>
	<key>MinimumVersion</key>
	<string>2.3</string>
	<key>ParentRecipe</key>
	<string>com.github.peetinc.download.DisplayLinkManager</string>
	<key>Process</key>
	<array>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>destination_path</key>
				<string>%RECIPE_CACHE_DIR%/unpacked</string>
				<key>flat_pkg_path</key>
				<string>%pkg_path%</string>
			</dict>
			<key>Processor</key>
			<string>FlatPkgUnpacker</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>destination_path</key>
				<string>%RECIPE_CACHE_DIR%/payload</string>
				<key>pkg_payload_path</key>
				<string>%RECIPE_CACHE_DIR%/unpacked/DisplayLinkManagerApp.pkg/Payload</string>
				<key>purge_destination</key>
				<true/>
			</dict>
			<key>Processor</key>
			<string>PkgPayloadUnpacker</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>info_path</key>
				<string>%RECIPE_CACHE_DIR%/payload/DisplayLink Manager.app</string>
				<key>plist_keys</key>
				<dict>
					<key>LSMinimumSystemVersion</key>
					<string>min_os_version</string>
				</dict>
			</dict>
			<key>Processor</key>
			<string>PlistReader</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>additional_pkginfo</key>
				<dict>
					<key>minimum_os_version</key>
					<string>%min_os_version%</string>
				</dict>
			</dict>
			<key>Processor</key>
			<string>MunkiPkginfoMerger</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>pkg_path</key>
				<string>%pkg_path%</string>
				<key>repo_subdirectory</key>
				<string>%MUNKI_REPO_SUBDIR%</string>
			</dict>
			<key>Processor</key>
			<string>MunkiImporter</string>
		</dict>
	</array>
</dict>
</plist>